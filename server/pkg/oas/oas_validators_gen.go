// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CreateTodoBadRequest) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CreateTodoInternalServerError) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTodoBadRequest) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTodoInternalServerError) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTodoNotFound) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTodoBadRequest) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTodoInternalServerError) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s GetTodoOKApplicationJSON) Validate() error {
	alias := ([]TodoInformation)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TodoInformation) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Title)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "title",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Detail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "detail",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           0,
			MaxSet:        true,
			Max:           100,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.Progress)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "progress",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TodoOpeError) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateTodoBadRequest) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateTodoInternalServerError) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateTodoNotFound) Validate() error {
	alias := (*TodoOpeError)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}
